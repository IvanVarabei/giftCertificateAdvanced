plugins {
    id 'org.springframework.boot' version '2.4.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.sonarqube" version "3.0"
    id 'java'
}

allprojects {
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }

    jacoco {
        toolVersion = '0.8.2'
    }
}

//xmlReportPaths
def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"

sonarqube {
    properties {
        //sonar.coverage.jacoco.xmlReportPaths
        //gradle build jacocoTestReport sonarqube
        //System.setProperty('sonar.jacoco.xmlReportPaths', allTestCoverageFile)
        property 'sonar.projectName', 'Example of SonarQube Scanner for Gradle Usage'
        System.setProperty('sonar.coverage.jacoco.xmlReportPaths', "$buildDir/reports/jococo/jacocoRootReport/jacocoTestReport.xml")
        System.setProperty('sonar.login', '7167ffa945ec95399bc9cf9bd05ababea5ad75df')
    }
}

//task jacocoMergeTest(type: JacocoMerge) {
//    destinationFile = file(allTestCoverageFile)
//    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
//}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

jacocoTestCoverageVerification {
    dependsOn test
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "org.sonarqube"

    ext.springVersion = '5.3.2'
    ext.jacksonVersion = '2.12.0'
    ext.mapstructVersion = '1.4.1.Final'

    tasks.withType(JavaCompile) {
        sourceCompatibility = 11
        targetCompatibility = 11
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        // Test
        testImplementation group: 'com.opentable.components', name: 'otj-pg-embedded', version: '0.13.3'
        testImplementation group: 'org.flywaydb', name: 'flyway-core', version: '7.4.0'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        // Spring Boot
        implementation 'org.springframework.boot:spring-boot-starter-hateoas'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-logging'
        implementation 'org.springframework.boot:spring-boot-starter-security'
//        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

        // Hibernate
        compileOnly 'org.hibernate:hibernate-jpamodelgen'
        annotationProcessor('org.hibernate:hibernate-jpamodelgen')
        compile 'org.hibernate:hibernate-envers'
        runtimeOnly 'org.postgresql:postgresql'

        // Spring
        implementation group: 'org.springframework', name: 'spring-context', version: springVersion

        // Jackson
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion

        // Validation
        implementation 'org.hibernate.validator:hibernate-validator:6.1.6.Final'

        // Database
        implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.18'
        implementation group: 'com.zaxxer', name: 'HikariCP', version: '3.4.5'

        // Lombok
        compileOnly 'org.projectlombok:lombok:1.18.16'
        annotationProcessor 'org.projectlombok:lombok:1.18.16'
        testCompileOnly 'org.projectlombok:lombok:1.18.16'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

        // Mapping
        implementation "org.mapstruct:mapstruct:${mapstructVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

        // Util
        implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    }

    jar {
        enabled = true
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

//    jacocoTestReport {
//        dependsOn test
//        reports {
//            html.enabled = true
//            xml.enabled = true
//            csv.enabled = false
//        }
//    }
//
//    jacocoTestCoverageVerification {
//        dependsOn test
//    }

//    sonarqube {
//        properties {
//            System.setProperty('sonar.jacoco.xmlReportPaths', allTestCoverageFile)
//        }
//    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    getAdditionalSourceDirs().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().setFrom(files(subprojects.sourceSets.main.output))
    getExecutionData().setFrom(files(subprojects.jacocoTestReport.executionData))
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
//    doFirst {
//        getExecutionData().setFrom(files(executionData.findAll) {
//            it.exists()
//        })
//    }
}
